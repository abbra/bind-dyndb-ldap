steps:
- script: |
    set -e
    env | sort
  displayName: Print Host Enviroment

- script: |
    set -e
    printf "Available entropy: %s\n" $(cat /proc/sys/kernel/random/entropy_avail)
    sudo apt-get install -y rng-tools
    sudo service rng-tools start
    sleep 3
    printf "Available entropy: %s\n" $(cat /proc/sys/kernel/random/entropy_avail)
  displayName: Increase entropy level

- script: |
    set -e
    sudo apt-get install -y \
        parallel \
        moreutils \
        systemd-coredump \
        python3-docker
    # ubuntu's one is too old: different API
    python3 -m pip install docker --user
  displayName: Install Host's tests requirements

- script: |
    set -eu
    date +'%Y-%m-%d %H:%M:%S' > coredumpctl.time.mark
    systemd_conf="/etc/systemd/system.conf"
    sudo sed -i 's/^DumpCore=.*/#&/g' "$systemd_conf"
    sudo sed -i 's/^DefaultLimitCORE=.*/#&/g' "$systemd_conf"
    echo -e 'DumpCore=yes\nDefaultLimitCORE=infinity' | \
        sudo tee -a "$systemd_conf" >/dev/null
    cat "$systemd_conf"
    coredump_conf="/etc/systemd/coredump.conf"
    cat "$coredump_conf"
    sudo systemctl daemon-reexec
    # for ns-slapd debugging
    sudo sysctl -w fs.suid_dumpable=1
  displayName: Allow coredumps

- template: setup-test-environment.yml

- template: run-test.yml

- task: PublishTestResults@2
  inputs:
    testResultsFiles: 'dyndb_ldap_envs/*/$(CI_RUNNER_LOGS_DIR)/nosetests.xml'
    testRunTitle: $(System.JobIdentifier) results
  condition: succeededOrFailed()

- script: |
    set -eu
    # check the host first, containers cores were dumped here
    COREDUMPS_SUBDIR="coredumps"
    COREDUMPS_DIR="${DYNDB_LDAP_TESTS_ENV_WORKING_DIR}/${COREDUMPS_SUBDIR}"
    rm -rfv "$COREDUMPS_DIR" ||:
    mkdir "$COREDUMPS_DIR"
    since_time="$(cat coredumpctl.time.mark || echo '-1h')"
    sudo coredumpctl --no-pager --since="$since_time" list ||:

    pids="$(sudo coredumpctl --no-pager --since="$since_time" -F COREDUMP_PID || echo '')"
    # nothing to dump
    [ -z "$pids" ] && exit 0

    # continue in container
    HOST_JOURNAL="/var/log/host_journal"
    CONTAINER_COREDUMP="dump_cores"
    docker create --privileged \
        -v "$(realpath coredumpctl.time.mark)":/coredumpctl.time.mark:ro \
        -v /var/lib/systemd/coredump:/var/lib/systemd/coredump:ro \
        -v /var/log/journal:"$HOST_JOURNAL":ro \
        -v "${BUILD_REPOSITORY_LOCALPATH}":"${DYNDB_LDAP_TESTS_REPO_PATH}" \
        --name "$CONTAINER_COREDUMP" dyndb-ldap-azure-builder
    docker start "$CONTAINER_COREDUMP"

    docker exec -t \
        --env DYNDB_LDAP_TESTS_REPO_PATH="${DYNDB_LDAP_TESTS_REPO_PATH}" \
        --env DYNDB_LDAP_TESTS_SCRIPTS="${DYNDB_LDAP_TESTS_REPO_PATH}/${DYNDB_LDAP_TESTS_SCRIPTS}" \
        --env DYNDB_LDAP_PLATFORM="${DYNDB_LDAP_PLATFORM}" \
        "$CONTAINER_COREDUMP" \
        /bin/bash --noprofile --norc -eux \
            "${DYNDB_LDAP_TESTS_REPO_PATH}/${DYNDB_LDAP_TESTS_SCRIPTS}/install-debuginfo.sh"

    docker exec -t \
        --env DYNDB_LDAP_TESTS_REPO_PATH="${DYNDB_LDAP_TESTS_REPO_PATH}" \
        --env COREDUMPS_SUBDIR="$COREDUMPS_SUBDIR" \
        --env HOST_JOURNAL="$HOST_JOURNAL" \
        "$CONTAINER_COREDUMP" \
        /bin/bash --noprofile --norc -eux \
            "${DYNDB_LDAP_TESTS_REPO_PATH}/${DYNDB_LDAP_TESTS_SCRIPTS}/dump_cores.sh"
    # there should be no crashes
    exit 1
  condition: succeededOrFailed()
  displayName: Check for coredumps

- script: |
    set -e

    artifacts_ignore_path="${DYNDB_LDAP_TESTS_ENV_WORKING_DIR}/.artifactignore"
    cat > "$artifacts_ignore_path" <<EOF
    **/*
    !coredumps/*.core.tar.gz
    !coredumps/*.stacktrace.tar.gz
    !*/logs/**
    !*/*.yml
    !*/*.yaml
    !*/*.log
    EOF
    cat "$artifacts_ignore_path"
  condition: succeededOrFailed()
  displayName: Generating artifactignore file

- template: save-test-artifacts.yml
  parameters:
    logsArtifact: logs-$(System.JobIdentifier)-$(Build.BuildId)-$(System.StageAttempt)-$(System.PhaseAttempt)-$(System.JobPositionInPhase)-$(Agent.OS)-$(Agent.OSArchitecture)
